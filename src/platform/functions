# gho: designated for current workflow "gho" == "go" 
gho(){
    PREV=$(pwd)
    cdi
    source reinstall_and_test.sh $1 $2
    cd $PREV
}

# ghh: Another designated current workflow if need two
ghh(){
    gho
    cdi
    cd misfit_toys/examples/ddp
    python ddp_driver.py
}

# clr: Designated data clearing function
clr(){
    cdc
    rm -rf data
}

# ghoc: "gho clear"
ghoc(){
    clr
    gho
}

# cddp: misfit_toys helper
cddp(){
    cdi
    cd misfit_toys/examples/ddp
}

# go: another current workflow helper
go(){
    cddp
    gho
    python driver.py
}

# kdata: kill data -- another cleaner if needed
kdata(){
    PREV=$(pwd)
    cdc
    rm -rf BENCHMARK
    cd $PREV
}

# mtd: misfit_toys download
mtd(){
    dwre
    # cd /home/tyler/Documents/repos/IslandOfMisfitToys/misfit_toys/examples
    cd $(pips)
    cd site-packages/misfit_toys/examples
    python download_data.py
}

# lll: helper for rich text -- deprecated
lll(){
    dwre
    rm /tmp/session.ans
    script -O /tmp/session.ans
}

# rexit: related to lll to leave the script env -- deprecated
rexit () {
    cact dw
    cd $(pips)
    cd site-packages/misfit_toys/examples
    python download_data.py

    exit
}

# gg: gdown helper
gg(){
    echo "gdown $1" | sed 's/view?.*//' | sed 's/file\/d\//uc?id=/'
}

# cdn: cd to misfit_toys/examples/ddp
cdn(){
    cdi misfit_toys/examples/ddp/$1
}

# go: Overwrite of the above -- see what you want here?
go(){
    # mhr
    # gho
    if [ -z $1 ]; then
        cdc
        rm -rf BENCHMARK
        cdn
        python driver.py
    fi
    if [ -z $2 ]; then
        cdn
        python dw_driver.py
    fi
    cdi debug
    python debug.py /home/tyler/protect conda/BENCHMARK/multiscale/data dw_validate/
    pfs dw_validate/ "*.txt" "*"
}

# cmp_tensor: compare tensors
cmp_tensor(){
    DIR1=${1:-"/home/tyler/protect"}
    DIR2=${2:-"conda/BENCHMARK/multiscale/data"}
    OUT_DIR=${3:-"$ISL/debug/dw_validate/"}
    MAKE_FIGS=${4:-""}
    cdi debug
    python debug.py $DIR1 $DIR2 $OUT_DIR -f -i v_record obs_data
    cd $OUT_DIR
    pfs . "*.txt" "*"
}

# genp: generate some data -- forgot what p stands for here
genp(){
    PREV=$(pwd)
    cdn
    python dw_driver.py
    cd $PREV
}

# geni: "generate island" -- generate the island of misfit toys version of data
geni(){
    PREV=$(pwd)
    if [ ! -z $1 ]; then
        echo "Cleaning out BENCHMARK data"
        sleep 3
        cdc
        rm -rf BENCHMARK
    fi
    cdn
    python driver.py
    cd $PREV
}

# cmarm: clean marmousi
cmarm(){
    PREV=$(pwd)
    cdc
    rm -rf data/marmousi
    cd $PREV
}

# down: download data
down(){
    PREV=$(pwd)
    cdi misfit_toys/examples
    python download_data.py
    cd $PREV
}

cda(){
    cdi misfit_toys/tccs/modules/alan
}

cmp(){
    BASE=$ISL/misfit_toys/tccs/modules
    TEST_FOLDER="out/parallel"
    MAKE_FIGS=${1:-""}
    mkdir -p $BASE/local_compare/$TEST_FOLDER
    echo "MAKE_FIGS: $MAKE_FIGS"
    cmp_tensor $BASE/alan/$TEST_FOLDER $BASE/val/$TEST_FOLDER $BASE/local_compare/$TEST_FOLDER 
}

smr(){
    TMP='/tmp/tmp1.txt'
    FIELD=${1:-"mean"}
    RES=$(ls *.txt | grep -v '[0-9][0-9]*' | xargs grep "$FIELD" | sed 's/ = /=/g' | awk -F':' '{print $1, $2}')
    cols -c 2 "$RES"> $TMP
    ctxt -t rbow $TMP
}

smr_all(){
    BASE=$ISL/misfit_toys/tccs/modules
    cd $BASE/local_compare/out/parallel

    fields=('dtype' 'shape' 'mean' 'variance' 'median' 'min' 'max' 'stddev' 'RMS' 'L2')
    echo "" > summary.txt
    for e in "${fields[@]}"; do
        echo >> summary.txt
        smr $e >> summary.txt
    done
    cat summary.txt
}
rcmp(){
    cdi misfit_toys/tccs/modules/val
    python fwi_parallel.py
    cmp $1
    smr_all
    code $(find . -name "*.gif")
}