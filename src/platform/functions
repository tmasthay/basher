# gho: designated for current workflow "gho" == "go"
n() {
    cd $REPO/Madagascar.jl
    if [ "$1" == "j" ]; then
        jse "Madagascar_jll"; sfje pre
    else
        jse; sfje pre
    fi
}

cc() {
    cd $ISL/misfit_toys/beta
}

# ghh: Another designated current workflow if need two
ghh() {
    cd ~/Software

    # check if the repo exists
    if [ ! -d "src" ]; then
        echo "Cloning the repo"
        git clone --branch julia_interface_bug --single-branch git@github.com:ahay/src.git
    fi
    cp $REPO/basher/src/bash_scripts/protective_hook.sh src/.git/hooks/pre-commit
    cd src
}

# clr: Designated data clearing function
clr() {
    cdc
    rm -rf data
}

# ghoc: "gho clear"
ghoc() {
    clr
    gho
}

# cddp: misfit_toys helper
cddp() {
    cdi
    cd misfit_toys/examples/ddp
}

# go: another current workflow helper
go() {
    mode=${1:-"pkg"}
    cd 
    mkje dev
    jenv dev "$REPO/Madagascar.jl/dev/test_$mode.jl"
    cdr Madagascar.jl
}

# kdata: kill data -- another cleaner if needed
kdata() {
    PREV=$(pwd)
    cdc
    rm -rf BENCHMARK
    cd $PREV
}

# mtd: misfit_toys download
mtd() {
    dwre
    # cd /home/tyler/Documents/repos/IslandOfMisfitToys/misfit_toys/examples
    cd $(pips)
    cd site-packages/misfit_toys/examples
    python download_data.py
}

# lll: helper for rich text -- deprecated
lll() {
    dwre
    rm /tmp/session.ans
    script -O /tmp/session.ans
}

# rexit: related to lll to leave the script env -- deprecated
rexit() {
    cact dw
    cd $(pips)
    cd site-packages/misfit_toys/examples
    python download_data.py

    exit
}

# gg: gdown helper
gg() {
    echo "gdown $1" | sed 's/view?.*//' | sed 's/file\/d\//uc?id=/'
}

# cdn: cd to misfit_toys/examples/ddp
cdn() {
    cdi misfit_toys/examples/ddp/$1
}

# cmp_tensor: compare tensors
cmp_tensor() {
    DIR1=${1:-"/home/tyler/protect"}
    DIR2=${2:-"conda/BENCHMARK/multiscale/data"}
    OUT_DIR=${3:-"$ISL/debug/dw_validate/"}
    MAKE_FIGS=${4:-""}
    cdi debug
    python debug.py $DIR1 $DIR2 $OUT_DIR -f -i vp_record obs_data
    cd $OUT_DIR
    # pfs . "*.txt" "*"
}

# genp: generate some data -- forgot what p stands for here
genp() {
    PREV=$(pwd)
    cdn
    python dw_driver.py
    cd $PREV
}

# geni: "generate island" -- generate the island of misfit toys version of data
geni() {
    PREV=$(pwd)
    if [ ! -z $1 ]; then
        echo "Cleaning out BENCHMARK data"
        sleep 3
        cdc
        rm -rf BENCHMARK
    fi
    cdn
    python driver.py
    cd $PREV
}

# cmarm: clean marmousi
cmarm() {
    PREV=$(pwd)
    cdc
    rm -rf data/marmousi
    cd $PREV
}

# down: download data
down() {
    PREV=$(pwd)
    cdi misfit_toys/examples
    python download_data.py
    cd $PREV
}

cmp() {
    BASE=$ISL/misfit_toys/tccs/modules
    TEST_FOLDER="out/parallel"
    MAKE_FIGS=${1:-""}
    mkdir -p $BASE/local_compare/$TEST_FOLDER
    echo "MAKE_FIGS: $MAKE_FIGS"
    cmp_tensor $BASE/alan/$TEST_FOLDER $BASE/val/$TEST_FOLDER $BASE/local_compare/$TEST_FOLDER
}

# smr: "summary" -- deprecated
smr() {
    TMP='/tmp/tmp1.txt'
    FIELD=${1:-"mean"}
    RES=$(ls *.txt | grep -v '[0-9][0-9]*' | xargs grep "$FIELD" | sed 's/ = /=/g' | awk -F':' '{print $1, $2}')
    cols -c 2 "$RES" >$TMP
    ctxt -t rbow $TMP
}

# smr_all: "summary all" -- deprecated
smr_all() {
    BASE=$ISL/misfit_toys/tccs/modules
    cd $BASE/local_compare/out/parallel

    fields=('dtype' 'shape' 'mean' 'variance' 'median' 'min' 'max' 'stddev' 'RMS' 'L2')
    echo "" >summary.txt
    for e in "${fields[@]}"; do
        echo >>summary.txt
        smr $e >>summary.txt
    done
    cat summary.txt
}

# rcmp: run compare -- deprecated
rcmp() {
    cdi misfit_toys/tccs/modules/val
    python fwi_parallel.py
    cmp $1
    smr_all
    code $(find . -name "*.gif")
}

# rrr: "run run run" -- deprecated
rrr() {
    cdi misfit_toys/tccs/modules/val
    python fwi_parallel.py
}

# runmeta: run meta -- deprecated
runmeta() {
    NUM_RUNS=${1:-10}
    STORAGE_FILE=${2:-"runmeta.txt"}
    echo "" >$STORAGE_FILE
    for i in {1..$NUM_RUNS}; do
        rcmp
        RES=$(
            cat summary.txt |
                grep "v_record" | \ 
            grep -E '(min|max)' |
                awk '{print $2}' |
                tr '\n' ', ' |
                sed 's/min=//' |
                sed 's/max=//' |
                sed 's/,$//'
        )
        echo $RES >>$STORAGE_FILE
    done
}

# mst: "misfit summary to csv" -- deprecated
mst() {
    local INPUT=${1:-"summary.txt"}
    local OUTPUT=${2:-"summary.csv"}
    echo "ignore ignore=0.0" >/tmp/ignore.txt
    cat /tmp/ignore.txt $INPUT |
        grep -E '(ignore|v_record)' |
        awk '{print $2}' |
        grep -vE '(dtype|shape)' |
        sed 's/=/,/' |
        sed 's/\x1b\[[0-9;]*m//g' >$OUTPUT
}

# cdv: "cd to val"
cdv() {
    BASE=$ISL/misfit_toys/tccs/modules
    OPTION=${1:-"local_compare"}
    cd $BASE/$OPTION/out/parallel
}

# vlt: "val loop test" -- deprecated
vlt() {
    local NUM_RUNS=${1-5}
    local ACCUM=${2:-"accum"}
    local INPUT=${3:-"summary"}
    cdv
    rm "$ACCUM.csv"
    for i in $(seq 1 "$NUM_RUNS"); do
        echo "Run $i"
        rcmp
        mst "$INPUT.txt" "$INPUT.csv"
        if [ "$i" -eq 1 ]; then # Changed 'do' to 'then'
            cat "$INPUT.csv" >"$ACCUM.csv"
        else # Added 'else' clause
            mst "$INPUT.txt" "$INPUT.csv"
            ccsv $ACCUM.csv $INPUT.csv -o "$ACCUM.csv"
        fi # Added 'fi' to close the if statement
    done
    stats $ACCUM.csv -t
    echo "Results stored in $ACCUM.(csv|txt) and $ACCUM_stats.(csv|txt)"
}

# mptab: "multiprocessing table" -- displays multiple rich tables side-by-side
mptab() {
    python $BASHER/src/py_scripts/mptab.py $@
}

# rtab2csv: convert rich table to csv -- deprecated?
rtab2csv() {
    local file=$1
    cat $file | ransi | salpha | tac | awk '/ANSIMARKER/ {exit} {print}' | tac | grep -v '^$' | sed -E 's/ +/,/g; s/^,//; s/,$//'
}

# cdm: cdi misfit_toys/tccs/modules
cdm() {
    cdi misfit_toys/tccs/modules/$1
}

# crun: "check run" -- check latest run for misfit_toys repo
crun() {
    cat $ISL/tests/benchmarks/out/validate.out
}

# gen_docs: regenerate docs for misfit_toys
gen_docs() {
    local prev=$(pwd)
    cdi docs
    rm -rf source
    cdi
    sphinx-apidoc -o docs/source -e -M misfit_toys
    cd docs/source
    # python clean_nest.py
    cdi docs
    python clean_nest.py
    make html
    cd $prev
}

# tdocs: "toggle docs" -- set an env var for github workflows for IOMT
tdocs() {
    mode=$1

    # if "on" then set the env var to "true", else set it to "false"
    if [ "$mode" == "on" ]; then
        export GEN_IOMT_DOCS="true"
    else
        export GEN_IOMT_DOCS="false"
    fi
}

#jse: julia setup
jse(){
    pc jse $@ | pbcopy
}


# jsec: julia setup clipboard
jsec(){
    echo $(jse $1) | pbcopy
}
